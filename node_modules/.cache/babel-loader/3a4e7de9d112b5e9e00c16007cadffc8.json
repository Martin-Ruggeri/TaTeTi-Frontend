{"ast":null,"code":"var _jsxFileName = \"/home/martin/Programas/React/tateti_v1.1/src/game/game.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { newGame, joinGame } from './gameApi';\nimport { newBoard } from './board/boardApi';\n\nfunction CreateGame() {\n  // Opciones que se pueden seleccionar\n  const options = ['Jugar contra la maquina', 'Jugar contra un amigo']; // HOOKS\n\n  const [radio, setRadio] = useState(options[1]);\n  const history = useHistory(); // Al accionar boton Crear partida\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // consume el evento\n\n    try {\n      const game = await newGame({\n        vsMaquina: radio === options[0]\n      });\n      history.push(`/game/${game.id}/`, {\n        game: game\n      }); // Cambiar a router game/id/board (component Board)\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => handleSubmit(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, options.map(option => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"radio\",\n    key: option.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    value: option,\n    checked: radio === option,\n    onChange: event => {\n      setRadio(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 33\n    }\n  }), option), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Crear Partida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  })));\n}\n\nfunction UnirGame() {\n  // HOOKS\n  const [codigo, setValueInput] = useState(Number);\n  const history = useHistory(); // Al accionar boton Crear partida\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // consume el evento\n\n    if (!codigo) return; // Si el input esta vacio retorna nada       // DEBERIA VALIDAR QUE AL ESTAR VACIO MUESTRE UN MENSAJE \"El Codigo no puede estar vacio\"\n\n    try {\n      const game = await joinGame(codigo, {}); // Une el user2 a la partida.\n\n      await newBoard(game.id, {}); // Crea el board inicial\n\n      history.push(`/game/${game.id}/board/`, {\n        game: game\n      }); // Cambiar a router game/id/board (component Board)\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => handleSubmit(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"unirPartida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, \"C\\xF3digo Partida\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"unirPartida\",\n    placeholder: \"Ingrese C\\xF3digo Partida\",\n    onChange: event => setValueInput(parseInt(event.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Unir Partida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport { CreateGame, UnirGame };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/game/game.tsx"],"names":["React","useState","useHistory","newGame","joinGame","newBoard","CreateGame","options","radio","setRadio","history","handleSubmit","event","preventDefault","game","vsMaquina","push","id","error","console","log","map","option","toString","target","value","UnirGame","codigo","setValueInput","Number","parseInt"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { newGame , joinGame , IGame} from './gameApi';\nimport { newBoard , IBoard } from './board/boardApi';\n\nfunction CreateGame() {\n    // Opciones que se pueden seleccionar\n    const options = ['Jugar contra la maquina', 'Jugar contra un amigo'];\n\n    // HOOKS\n    const [radio, setRadio] = useState(options[1]);\n    const history = useHistory();\n\n    // Al accionar boton Crear partida\n    async function handleSubmit(event: React.FormEvent) {\n        event.preventDefault();   // consume el evento\n\n\n        try {\n            const game: IGame = await newGame({ vsMaquina: radio === options[0]});\n\n            history.push(`/game/${game.id}/`, {game:game});          // Cambiar a router game/id/board (component Board)\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    return (\n        <form onSubmit={(event) => handleSubmit(event)}>\n            <fieldset>\n\n                {\n                    options.map(option =>\n                        <div className=\"radio\" key={option.toString()}>\n                            <label>\n                                <input type=\"radio\" value={option} checked={radio === option} onChange={(event) => {setRadio(event.target.value)}} />\n                                {option}\n                            </label>\n\n                            <br />\n                        </div>\n                    )\n                }\n\n                <input type=\"submit\" value=\"Crear Partida\" />\n\n            </fieldset>\n        </form> \n    );\n}\n\n\nfunction UnirGame() {\n\n    // HOOKS\n    const [codigo, setValueInput] = useState(Number);\n    const history = useHistory();\n\n    // Al accionar boton Crear partida\n    async function handleSubmit(event: React.FormEvent) {\n        event.preventDefault();   // consume el evento\n\n        if(!codigo) return;  // Si el input esta vacio retorna nada       // DEBERIA VALIDAR QUE AL ESTAR VACIO MUESTRE UN MENSAJE \"El Codigo no puede estar vacio\"\n\n        try {\n            const game: IGame = await joinGame(codigo, {});         // Une el user2 a la partida.\n\n            await newBoard(game.id , {});     // Crea el board inicial\n\n            history.push(`/game/${game.id}/board/`, {game: game});          // Cambiar a router game/id/board (component Board)\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    return (\n        <form onSubmit={(event) => handleSubmit(event)}>\n            <fieldset>\n\n                <label htmlFor=\"unirPartida\">Código Partida</label>\n                <input type=\"number\" id=\"unirPartida\" placeholder=\"Ingrese Código Partida\" onChange={(event) => setValueInput(parseInt(event.target.value))} />\n\n                <input type=\"submit\" value=\"Unir Partida\" />\n\n            </fieldset>\n        </form>\n    );\n}\n\n\nexport { CreateGame , UnirGame};"]},"metadata":{},"sourceType":"module"}