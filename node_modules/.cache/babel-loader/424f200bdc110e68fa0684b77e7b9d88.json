{"ast":null,"code":"var _jsxFileName = \"/home/martin/Programas/React/tateti_v1.1/src/game/game.tsx\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { newGame, joinGame } from './gameApi';\nimport { newBoard } from './board/boardApi';\n\nfunction CreateGame() {\n  // Opciones que se pueden seleccionar\n  const options = ['Jugar contra la maquina', 'Jugar contra un amigo']; // HOOKS\n\n  const [radio, setRadio] = useState(options[1]);\n  const history = useHistory(); // Al accionar boton Crear partida\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // consume el evento\n\n    try {\n      switch (radio) {\n        case options[0]:\n          {\n            const game = await newGame({\n              vsMaquina: true\n            });\n            history.push(`/game/board`, {\n              gameInit: game\n            }); // Cambiar al component Board\n\n            break;\n          }\n\n        case options[1]:\n          {\n            const game = await newGame({\n              vsMaquina: false\n            });\n            history.push(`/game/waiting`, {\n              gameInit: game\n            }); // Cambiar al component WaitJoined\n\n            break;\n          }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => handleSubmit(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, options.map(option => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"radio\",\n    key: option.toString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    value: option,\n    checked: radio === option,\n    onChange: event => {\n      setRadio(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }\n  }), option), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Crear Partida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  })));\n}\n\nfunction UnirGame() {\n  // HOOKS\n  const [codigo, setValueInput] = useState(Number);\n  const history = useHistory(); // Al accionar boton Crear partida\n\n  async function handleSubmit(event) {\n    event.preventDefault(); // consume el evento\n\n    if (!codigo) return; // Si el input esta vacio retorna nada       // DEBERIA VALIDAR QUE AL ESTAR VACIO MUESTRE UN MENSAJE \"El Codigo no puede estar vacio\"\n\n    try {\n      const game = await joinGame(codigo, {}); // Une el user2 a la partida.\n\n      await newBoard(game.id, {}); // Crea el board inicial\n\n      history.push(`/game/board/`, {\n        gameInit: game\n      }); // Cambiar al component Board\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: event => handleSubmit(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"unirPartida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"C\\xF3digo Partida\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    id: \"unirPartida\",\n    placeholder: \"Ingrese C\\xF3digo Partida\",\n    onChange: event => setValueInput(parseInt(event.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Unir Partida\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport { CreateGame, UnirGame };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/game/game.tsx"],"names":["React","useState","useHistory","newGame","joinGame","newBoard","CreateGame","options","radio","setRadio","history","handleSubmit","event","preventDefault","game","vsMaquina","push","gameInit","error","console","log","map","option","toString","target","value","UnirGame","codigo","setValueInput","Number","id","parseInt"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { newGame, joinGame, IGame } from './gameApi';\nimport { newBoard } from './board/boardApi';\n\nfunction CreateGame() {\n    // Opciones que se pueden seleccionar\n    const options = ['Jugar contra la maquina', 'Jugar contra un amigo'];\n\n    // HOOKS\n    const [radio, setRadio] = useState(options[1]);\n    const history = useHistory();\n\n    // Al accionar boton Crear partida\n    async function handleSubmit(event: React.FormEvent) {\n        event.preventDefault();   // consume el evento\n\n        try {\n            switch (radio) {\n                case options[0]:{\n                    const game: IGame = await newGame({ vsMaquina: true });\n                    history.push(`/game/board`, { gameInit: game });          // Cambiar al component Board\n                    break;\n                }\n\n                case options[1]:{\n                    const game: IGame = await newGame({ vsMaquina: false });\n                    history.push(`/game/waiting`, { gameInit: game });          // Cambiar al component WaitJoined\n                    break; \n                }\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    return (\n        <form onSubmit={(event) => handleSubmit(event)}>\n            <fieldset>\n\n                {\n                    options.map(option =>\n                        <div className=\"radio\" key={option.toString()}>\n                            <label>\n                                <input type=\"radio\" value={option} checked={radio === option} onChange={(event) => { setRadio(event.target.value) }} />\n                                {option}\n                            </label>\n\n                            <br />\n                        </div>\n                    )\n                }\n\n                <input type=\"submit\" value=\"Crear Partida\" />\n\n            </fieldset>\n        </form>\n    );\n}\n\n\nfunction UnirGame() {\n\n    // HOOKS\n    const [codigo, setValueInput] = useState(Number);\n    const history = useHistory();\n\n    // Al accionar boton Crear partida\n    async function handleSubmit(event: React.FormEvent) {\n        event.preventDefault();   // consume el evento\n\n        if (!codigo) return;  // Si el input esta vacio retorna nada       // DEBERIA VALIDAR QUE AL ESTAR VACIO MUESTRE UN MENSAJE \"El Codigo no puede estar vacio\"\n\n        try {\n            const game: IGame = await joinGame(codigo, {});         // Une el user2 a la partida.\n\n            await newBoard(game.id, {});     // Crea el board inicial\n\n            history.push(`/game/board/`, { gameInit: game });          // Cambiar al component Board\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    return (\n        <form onSubmit={(event) => handleSubmit(event)}>\n            <fieldset>\n\n                <label htmlFor=\"unirPartida\">Código Partida</label>\n                <input type=\"number\" id=\"unirPartida\" placeholder=\"Ingrese Código Partida\" onChange={(event) => setValueInput(parseInt(event.target.value))} />\n\n                <input type=\"submit\" value=\"Unir Partida\" />\n\n            </fieldset>\n        </form>\n    );\n}\n\n\nexport { CreateGame, UnirGame };"]},"metadata":{},"sourceType":"module"}