{"ast":null,"code":"import axios from 'axios';\n// VARIABLES\nconst URLBase = 'http://127.0.0.1:3000/game/'; // INTERFACES\n\n// POST GAME\nasync function newGame(body) {\n  try {\n    const res = (await axios.post(URLBase, body)).data; // Crea el game en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    const result = res.response.result;\n    return Promise.resolve(result); // Devuelve el id del game creado\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // PUT GAME\n\n\nasync function joinGame(id, body) {\n  try {\n    const res = (await axios.put(URLBase + id, body)).data; // Crea el game en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    const a = {\n      id: 0\n    };\n    return Promise.resolve(res.response.result);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // GET GAME\n\n\nasync function getGame(id) {\n  try {\n    const res = (await axios.get(URLBase + id)).data; // Obtiene el game en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\nexport { newGame, joinGame, getGame };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/game/gameApi.tsx"],"names":["axios","URLBase","newGame","body","res","post","data","status","Promise","reject","response","err","result","resolve","error","joinGame","id","put","a","getGame","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA;AACA,MAAMC,OAAO,GAAG,6BAAhB,C,CAGA;;AAkBA;AACA,eAAeC,OAAf,CAAuBC,IAAvB,EAAsD;AAClD,MAAI;AACA,UAAMC,GAAG,GAAG,CAAC,MAAMJ,KAAK,CAACK,IAAN,CAAYJ,OAAZ,EAAoBE,IAApB,CAAP,EAAkCG,IAA9C,CADA,CAC4D;;AAE5D,QAAGF,GAAG,CAACG,MAAJ,KAAe,OAAlB,EAA2B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,UAAMC,MAAM,GAAGR,GAAG,CAACM,QAAJ,CAAaE,MAA5B;AAEA,WAAOJ,OAAO,CAACK,OAAR,CAAgBD,MAAhB,CAAP,CAPA,CAOmC;AAEtC,GATD,CASE,OAAOE,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ,C,CAED;;;AACA,eAAeC,QAAf,CAAwBC,EAAxB,EAAmCb,IAAnC,EAAsE;AAClE,MAAI;AACA,UAAMC,GAAG,GAAG,CAAC,MAAMJ,KAAK,CAACiB,GAAN,CAAWhB,OAAO,GAAGe,EAArB,EAAyBb,IAAzB,CAAP,EAAuCG,IAAnD,CADA,CACiE;;AAEjE,QAAGF,GAAG,CAACG,MAAJ,KAAe,OAAlB,EAA2B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,UAAMO,CAAC,GAAG;AAACF,MAAAA,EAAE,EAAC;AAAJ,KAAV;AAEA,WAAOR,OAAO,CAACK,OAAR,CAAgBT,GAAG,CAACM,QAAJ,CAAaE,MAA7B,CAAP;AAEH,GATD,CASE,OAAOE,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ,C,CAED;;;AACA,eAAeK,OAAf,CAAuBH,EAAvB,EAAkD;AAC9C,MAAI;AACA,UAAMZ,GAAG,GAAG,CAAC,MAAMJ,KAAK,CAACoB,GAAN,CAAWnB,OAAO,GAAGe,EAArB,CAAP,EAAiCV,IAA7C,CADA,CAC2D;;AAE3D,QAAGF,GAAG,CAACG,MAAJ,KAAe,OAAlB,EAA2B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,WAAOH,OAAO,CAACK,OAAR,CAAgBT,GAAG,CAACM,QAAJ,CAAaE,MAA7B,CAAP;AAEH,GAPD,CAOE,OAAOE,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ;;AAGD,SAASZ,OAAT,EAAmBa,QAAnB,EAA6BI,OAA7B","sourcesContent":["import axios from 'axios';\nimport { IUser, findByIdUser} from '../user/userApi';\n\n// VARIABLES\nconst URLBase = 'http://127.0.0.1:3000/game/';\n\n\n// INTERFACES\nexport interface IGame {\n    id: number,\n    user1: IUser,\n    user2: IUser,\n    winUser1: number,\n    winUser2: number,\n    vsMaquina: boolean,\n    ultBoard?: number,\n}\n\ninterface IUpGame {\n    vsMaquina: boolean,\n}\n\ninterface IUpDateGame {\n}\n\n// POST GAME\nasync function newGame(body: IUpGame): Promise<IGame> {\n    try {\n        const res = (await axios.post (URLBase,body)).data;         // Crea el game en la API \n        \n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        const result = res.response.result as IGame;\n\n        return Promise.resolve(result);    // Devuelve el id del game creado\n\n    } catch (error) {\n        return Promise.reject(error);\n    } \n}\n\n// PUT GAME\nasync function joinGame(id:number ,body: IUpDateGame): Promise<IGame> {\n    try {\n        const res = (await axios.put (URLBase + id, body)).data;         // Crea el game en la API \n        \n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        const a = {id:0} as IGame;\n\n        return Promise.resolve(res.response.result as IGame);  \n\n    } catch (error) {\n        return Promise.reject(error);\n    } \n}\n\n// GET GAME\nasync function getGame(id:number): Promise<IGame> {\n    try {\n        const res = (await axios.get (URLBase + id)).data;         // Obtiene el game en la API \n        \n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result as IGame);  \n\n    } catch (error) {\n        return Promise.reject(error);\n    } \n}\n\n\nexport { newGame , joinGame, getGame};"]},"metadata":{},"sourceType":"module"}