{"ast":null,"code":"import axios from 'axios'; // VARIABLES\n\nconst URLBase = 'http://127.0.0.1:3000/user/'; // INTERFACES\n\n// GET USER\nasync function findUserByToken() {\n  try {\n    const res = (await axios.get(URLBase + 'whoami')).data.response.result;\n    return Promise.resolve(res);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // POST USER\n\n\nasync function postUser(body) {\n  try {\n    const res = (await axios.post(URLBase, body)).data; // Crea el usuario en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result.token); // Devuelve el token del user creado\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\nexport { findUserByToken, postUser };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/user/userApi.tsx"],"names":["axios","URLBase","findUserByToken","res","get","data","response","result","Promise","resolve","error","reject","postUser","body","post","status","err","token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,6BAAhB,C,CAGA;;AAWA;AACA,eAAeC,eAAf,GAAkD;AAC9C,MAAI;AACA,UAAMC,GAAG,GAAE,CAAC,MAAMH,KAAK,CAACI,GAAN,CAAUH,OAAO,GAAG,QAApB,CAAP,EAAsCI,IAAtC,CAA2CC,QAA3C,CAAoDC,MAA/D;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBN,GAAhB,CAAP;AACH,GAHD,CAGE,OAAOO,KAAP,EAAc;AACZ,WAAOF,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH;AACJ,C,CAGD;;;AACA,eAAeE,QAAf,CAAwBC,IAAxB,EAAwD;AACpD,MAAI;AACA,UAAMV,GAAG,GAAG,CAAC,MAAMH,KAAK,CAACc,IAAN,CAAYb,OAAZ,EAAoBY,IAApB,CAAP,EAAkCR,IAA9C,CADA,CAC4D;;AAE5D,QAAGF,GAAG,CAACY,MAAJ,KAAe,OAAlB,EAA2B,OAAOP,OAAO,CAACG,MAAR,CAAeR,GAAG,CAACG,QAAJ,CAAaU,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,WAAOR,OAAO,CAACC,OAAR,CAAgBN,GAAG,CAACG,QAAJ,CAAaC,MAAb,CAAoBU,KAApC,CAAP,CALA,CAKsD;AAEzD,GAPD,CAOE,OAAOP,KAAP,EAAc;AACZ,WAAOF,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACH;AACJ;;AAED,SAASR,eAAT,EAA2BU,QAA3B","sourcesContent":["import axios from 'axios';\n\n// VARIABLES\nconst URLBase = 'http://127.0.0.1:3000/user/';\n\n\n// INTERFACES\ninterface IUser {\n    id: number,\n    name: string,\n}\n\ninterface IUpUser {\n    name: string,\n}\n\n\n// GET USER\nasync function findUserByToken(): Promise<IUser>  {\n    try {\n        const res= (await axios.get(URLBase + 'whoami')).data.response.result as IUser;\n        return Promise.resolve(res);\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n\n// POST USER\nasync function postUser(body: IUpUser): Promise<string> {\n    try {\n        const res = (await axios.post (URLBase,body)).data;         // Crea el usuario en la API \n        \n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result.token);    // Devuelve el token del user creado\n\n    } catch (error) {\n        return Promise.reject(error);\n    } \n}\n\nexport { findUserByToken , postUser};"]},"metadata":{},"sourceType":"module"}