{"ast":null,"code":"import axios from 'axios';\nconst TOKEN_KEY = 'TOKEN_USER';\n\nfunction setToken(token) {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\nfunction getToken() {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\nfunction deleteToken() {\n  localStorage.removeItem(TOKEN_KEY);\n}\n\nfunction initAxiosInterceptors() {\n  axios.interceptors.request.use(config => {\n    const token = getToken();\n    if (token) config.headers.authorization = token;\n    return config;\n  });\n  axios.interceptors.response.use(response => {\n    return response;\n  });\n}\n\nexport { setToken, getToken, deleteToken, initAxiosInterceptors };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/helpers/auth-helpers.tsx"],"names":["axios","TOKEN_KEY","setToken","token","localStorage","setItem","getToken","getItem","deleteToken","removeItem","initAxiosInterceptors","interceptors","request","use","config","headers","authorization","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,YAAlB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAuC;AACnCC,EAAAA,YAAY,CAACC,OAAb,CAAqBJ,SAArB,EAAgCE,KAAhC;AACH;;AAED,SAASG,QAAT,GAAmB;AACf,SAAOF,YAAY,CAACG,OAAb,CAAqBN,SAArB,CAAP;AACH;;AAGD,SAASO,WAAT,GAA6B;AACzBJ,EAAAA,YAAY,CAACK,UAAb,CAAwBR,SAAxB;AACH;;AAED,SAASS,qBAAT,GAAiC;AAC7BV,EAAAA,KAAK,CAACW,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACvC,UAAMX,KAAK,GAAGG,QAAQ,EAAtB;AAEA,QAAIH,KAAJ,EAAWW,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+Bb,KAA/B;AAEX,WAAOW,MAAP;AACH,GAND;AAQAd,EAAAA,KAAK,CAACW,YAAN,CAAmBM,QAAnB,CAA4BJ,GAA5B,CAAiCI,QAAD,IAAc;AAC1C,WAAOA,QAAP;AACH,GAFD;AAGH;;AAED,SAAQf,QAAR,EAAmBI,QAAnB,EAA8BE,WAA9B,EAA4CE,qBAA5C","sourcesContent":["import axios from 'axios';\n\nconst TOKEN_KEY = 'TOKEN_USER';\n\nfunction setToken(token: string): void {\n    localStorage.setItem(TOKEN_KEY, token);\n}\n\nfunction getToken(){\n    return localStorage.getItem(TOKEN_KEY);\n}\n\n\nfunction deleteToken(): void {\n    localStorage.removeItem(TOKEN_KEY);\n}\n\nfunction initAxiosInterceptors() {\n    axios.interceptors.request.use((config) => {\n        const token = getToken(); \n\n        if (token) config.headers.authorization = token;\n\n        return config;\n    });\n\n    axios.interceptors.response.use((response) => {\n        return response;\n    })\n}\n\nexport {setToken , getToken , deleteToken , initAxiosInterceptors};"]},"metadata":{},"sourceType":"module"}