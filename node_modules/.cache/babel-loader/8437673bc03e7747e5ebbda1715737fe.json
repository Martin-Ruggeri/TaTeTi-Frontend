{"ast":null,"code":"import axios from 'axios'; // VARIABLES\n\nconst URLBase = 'http://127.0.0.1:3000/game/'; // INTERFACES\n\n// POST BOARD\nasync function newBoard(idGame, body) {\n  try {\n    const res = (await axios.post(URLBase + idGame + '/board/', body)).data; // Crea el board en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result); // Devuelve el board creado\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // PUT BOARD\n\n\nasync function editBoard(idGame, id, body) {\n  try {\n    const res = (await axios.put(URLBase + idGame + '/board/' + id, body)).data; // Modifica el board en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result); // Devuelve el board creado\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // GET BOARD\n\n\nasync function getBoard(idGame, id) {\n  try {\n    const res = (await axios.get(URLBase + idGame + '/board/' + id)).data; // Busca el board en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result); // Devuelve el board creado\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\nasync function getboardPru(idGame, id) {\n  try {\n    return await getBoard(idGame, id);\n  } catch (error) {\n    console.log(error);\n  }\n\n  return null;\n}\n\nexport { newBoard, editBoard, getBoard, getboardPru };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/game/board/boardApi.tsx"],"names":["axios","URLBase","newBoard","idGame","body","res","post","data","status","Promise","reject","response","err","resolve","result","error","editBoard","id","put","getBoard","get","getboardPru","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,6BAAhB,C,CAGA;;AAeA;AACA,eAAeC,QAAf,CAAwBC,MAAxB,EAAwCC,IAAxC,EAAyE;AACrE,MAAI;AACA,UAAMC,GAAG,GAAG,CAAC,MAAML,KAAK,CAACM,IAAN,CAAWL,OAAO,GAAGE,MAAV,GAAmB,SAA9B,EAAyCC,IAAzC,CAAP,EAAuDG,IAAnE,CADA,CACiF;;AAEjF,QAAIF,GAAG,CAACG,MAAJ,KAAe,OAAnB,EAA4B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH5B,CAGsE;;AAEtE,WAAOH,OAAO,CAACI,OAAR,CAAgBR,GAAG,CAACM,QAAJ,CAAaG,MAA7B,CAAP,CALA,CAK0D;AAE7D,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ,C,CAED;;;AACA,eAAeC,SAAf,CAAyBb,MAAzB,EAAyCc,EAAzC,EAAqDb,IAArD,EAA0F;AACtF,MAAI;AACA,UAAMC,GAAG,GAAG,CAAC,MAAML,KAAK,CAACkB,GAAN,CAAUjB,OAAO,GAAGE,MAAV,GAAmB,SAAnB,GAA+Bc,EAAzC,EAA6Cb,IAA7C,CAAP,EAA2DG,IAAvE,CADA,CACqF;;AAErF,QAAIF,GAAG,CAACG,MAAJ,KAAe,OAAnB,EAA4B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH5B,CAGsE;;AAEtE,WAAOH,OAAO,CAACI,OAAR,CAAgBR,GAAG,CAACM,QAAJ,CAAaG,MAA7B,CAAP,CALA,CAK0D;AAE7D,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ,C,CAED;;;AACA,eAAeI,QAAf,CAAwBhB,MAAxB,EAAwCc,EAAxC,EAAqE;AACjE,MAAI;AACA,UAAMZ,GAAG,GAAG,CAAC,MAAML,KAAK,CAACoB,GAAN,CAAUnB,OAAO,GAAGE,MAAV,GAAmB,SAAnB,GAA+Bc,EAAzC,CAAP,EAAqDV,IAAjE,CADA,CAC+E;;AAE/E,QAAIF,GAAG,CAACG,MAAJ,KAAe,OAAnB,EAA4B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH5B,CAGsE;;AAEtE,WAAOH,OAAO,CAACI,OAAR,CAAgBR,GAAG,CAACM,QAAJ,CAAaG,MAA7B,CAAP,CALA,CAK0D;AAE7D,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ;;AAID,eAAeM,WAAf,CAA2BlB,MAA3B,EAA2Cc,EAA3C,EAAsD;AAElD,MAAI;AACA,WAAO,MAAME,QAAQ,CAAChB,MAAD,EAASc,EAAT,CAArB;AACH,GAFD,CAEE,OAAOF,KAAP,EAAc;AACZO,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACH;;AAED,SAAO,IAAP;AACH;;AAID,SAASb,QAAT,EAAmBc,SAAnB,EAA8BG,QAA9B,EAAyCE,WAAzC","sourcesContent":["import axios from 'axios';\n\n// VARIABLES\nconst URLBase = 'http://127.0.0.1:3000/game/';\n\n\n// INTERFACES\nexport interface IBoard {\n    id: number,\n    casillas: string[],\n    turno: string,\n    win?: string\n}\n\ninterface IUpBoard {\n}\n\nexport interface IUpDateBoard {\n    casilla: number,        // el numero de la casilla a modificar [0,1,2,3,4,5,6,7,8]\n}\n\n// POST BOARD\nasync function newBoard(idGame: number, body: IUpBoard): Promise<IBoard> {\n    try {\n        const res = (await axios.post(URLBase + idGame + '/board/', body)).data;         // Crea el board en la API \n\n        if (res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result as IBoard);    // Devuelve el board creado\n\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n// PUT BOARD\nasync function editBoard(idGame: number, id: number, body: IUpDateBoard): Promise<IBoard> {\n    try {\n        const res = (await axios.put(URLBase + idGame + '/board/' + id, body)).data;         // Modifica el board en la API \n\n        if (res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result as IBoard);    // Devuelve el board creado\n\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n// GET BOARD\nasync function getBoard(idGame: number, id: number): Promise<IBoard> {\n    try {\n        const res = (await axios.get(URLBase + idGame + '/board/' + id)).data;         // Busca el board en la API \n\n        if (res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result as IBoard);    // Devuelve el board creado\n\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n\n\nasync function getboardPru(idGame: number, id: number){\n\n    try {\n        return await getBoard(idGame, id);\n    } catch (error) {\n        console.log(error)\n    }\n\n    return null;\n}\n\n\n\nexport { newBoard, editBoard, getBoard , getboardPru};"]},"metadata":{},"sourceType":"module"}