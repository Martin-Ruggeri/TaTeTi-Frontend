{"ast":null,"code":"import axios from 'axios'; // VARIABLES\n\nconst URLBase = 'http://127.0.0.1:3000/user/'; // INTERFACES\n\n// GET USER (busca por el token guardado en el headers )\nasync function findUser() {\n  try {\n    const res = (await axios.get(URLBase + 'whoami')).data;\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // GET USER\n\n\nasync function findByIdUser(id) {\n  try {\n    const res = (await axios.get(URLBase + id)).data;\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n} // POST USER\n\n\nasync function postUser(body) {\n  try {\n    const res = (await axios.post(URLBase, body)).data; // Crea el usuario en la API \n\n    if (res.status === \"ERROR\") return Promise.reject(res.response.err); // Si hubo un error responde el error\n\n    return Promise.resolve(res.response.result.token); // Devuelve el token del user creado\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\nexport { findByIdUser, findUser, postUser };","map":{"version":3,"sources":["/home/martin/Programas/React/tateti_v1.1/src/user/userApi.tsx"],"names":["axios","URLBase","findUser","res","get","data","status","Promise","reject","response","err","resolve","result","error","findByIdUser","id","postUser","body","post","token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG,6BAAhB,C,CAGA;;AAYA;AACA,eAAeC,QAAf,GAA2C;AACvC,MAAI;AACA,UAAMC,GAAG,GAAE,CAAC,MAAMH,KAAK,CAACI,GAAN,CAAUH,OAAO,GAAG,QAApB,CAAP,EAAsCI,IAAjD;AAEA,QAAGF,GAAG,CAACG,MAAJ,KAAe,OAAlB,EAA2B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,WAAOH,OAAO,CAACI,OAAR,CAAgBR,GAAG,CAACM,QAAJ,CAAaG,MAA7B,CAAP;AACH,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ,C,CAGD;;;AACA,eAAeC,YAAf,CAA4BC,EAA5B,EAAwD;AACpD,MAAI;AACA,UAAMZ,GAAG,GAAE,CAAC,MAAMH,KAAK,CAACI,GAAN,CAAUH,OAAO,GAAGc,EAApB,CAAP,EAAgCV,IAA3C;AAEA,QAAGF,GAAG,CAACG,MAAJ,KAAe,OAAlB,EAA2B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,WAAOH,OAAO,CAACI,OAAR,CAAgBR,GAAG,CAACM,QAAJ,CAAaG,MAA7B,CAAP;AACH,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ,C,CAGD;;;AACA,eAAeG,QAAf,CAAwBC,IAAxB,EAAwD;AACpD,MAAI;AACA,UAAMd,GAAG,GAAG,CAAC,MAAMH,KAAK,CAACkB,IAAN,CAAYjB,OAAZ,EAAoBgB,IAApB,CAAP,EAAkCZ,IAA9C,CADA,CAC4D;;AAE5D,QAAGF,GAAG,CAACG,MAAJ,KAAe,OAAlB,EAA2B,OAAOC,OAAO,CAACC,MAAR,CAAeL,GAAG,CAACM,QAAJ,CAAaC,GAA5B,CAAP,CAH3B,CAGqE;;AAErE,WAAOH,OAAO,CAACI,OAAR,CAAgBR,GAAG,CAACM,QAAJ,CAAaG,MAAb,CAAoBO,KAApC,CAAP,CALA,CAKgE;AAEnE,GAPD,CAOE,OAAON,KAAP,EAAc;AACZ,WAAON,OAAO,CAACC,MAAR,CAAeK,KAAf,CAAP;AACH;AACJ;;AAED,SAAQC,YAAR,EAAuBZ,QAAvB,EAAkCc,QAAlC","sourcesContent":["import axios from 'axios';\n\n// VARIABLES\nconst URLBase = 'http://127.0.0.1:3000/user/';\n\n\n// INTERFACES\nexport interface IUser {\n    id: number,\n    name: string,\n    token: string,\n}\n\ninterface IUpUser {\n    name: string,\n}\n\n\n// GET USER (busca por el token guardado en el headers )\nasync function findUser(): Promise<IUser>  {\n    try {\n        const res= (await axios.get(URLBase + 'whoami')).data;\n\n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result as IUser);\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n\n// GET USER\nasync function findByIdUser(id:number): Promise<IUser>  {\n    try {\n        const res= (await axios.get(URLBase + id)).data;\n\n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result as IUser);\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n\n// POST USER\nasync function postUser(body: IUpUser): Promise<string> {\n    try {\n        const res = (await axios.post (URLBase,body)).data;         // Crea el usuario en la API \n        \n        if(res.status === \"ERROR\") return Promise.reject(res.response.err);  // Si hubo un error responde el error\n\n        return Promise.resolve(res.response.result.token as string);    // Devuelve el token del user creado\n\n    } catch (error) {\n        return Promise.reject(error);\n    } \n}\n\nexport {findByIdUser , findUser , postUser};"]},"metadata":{},"sourceType":"module"}